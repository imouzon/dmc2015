% For LaTeX-Box: root = first_attempt.tex 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%  File Name: first_attempt.rnw
%  Purpose:
%
%  Creation Date: 07-04-2015
%  Last Modified: Sun Jun 21 17:26:45 2015
%  Created By:
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%-- Set parent file
<<set-parent, echo=FALSE, message=FALSE, cache=FALSE, include = TRUE>>=
   #set up knitr
   #devtools::install_github('imouzon/usefulR')
   library(usefulR)

   working.dir = "/Users/user/dmc2015/ian"
   setwd(working.dir)
   knitrSetup(rootDir=FALSE,use.tikz=FALSE)
   opts_chunk$set(out.width = ".9\\linewidth")

   #set up file locations
   parent.file = makeParent(parentDir = getwd(),overwrite=FALSE)
   set_parent(parent.file)
@

%-- title page and quote
\HWinfo{April 7 2015}{1}{}
\titleheader

I am using the following packages:
%-- paks: R code (Code in Document)
<<paks, echo=TRUE, cache=FALSE, message=FALSE, include=TRUE>>=
   library(ggplot2)
   library(lubridate)
   library(xtable)
   library(rCharts)
   library(plyr)
   library(reshape2)
@
and my working directory is set to \verb!dmc2015/ian!.

\section{Starting with the basics}
\subsection{Reading the data correctly}
The data is appears to be "pipe delimited", the same format used in the 2013 DMC. 
To be on the safe side we should possible scan the file first:
%-- scanData: R code (Code in Document)
<<scanData, echo=TRUE, cache=FALSE, include = TRUE>>=
   #scan the first five lines
   raw_file = scan(file = "../data/raw_data/DMC_2015_orders_class.txt", what = "character", nlines = 5, sep="\n",na.strings = "")
   raw_file[2]
   raw_file[4]
@
Notice that some of the variables have commas separating them. 
Additionally, there are \verb!||||! at the ends of the lines (the classification data is missing what we need to predict).

Read the data into R:
%-- readDat: R code (Code in Document)
<<readDat, echo=TRUE, cache=FALSE, include=TRUE>>=
   #training set ("historical data")
   trn = read.delim("../data/raw_data/DMC_2015_orders_train.txt", stringsAsFactors = FALSE, sep = "|", quote = "")

   #test set ("future data")
   tst = read.delim("../data/raw_data/DMC_2015_orders_class.txt", stringsAsFactors = FALSE, sep = "|", quote = "")
@

I will break up the data set into the following sets of columns for easy display:

\textbf{Session information}
The variables \verb!orderID!, \verb!orderTime!, \verb!userID!, and \verb!couponsReceived! are described as 
"order number", "time of order", "user identifier", and "time of coupon generation" respectively.
The response (?) \verb!basketValue! could also go here.
These variable all describe who was shopping and when.
%-- sessioninfo: R code (Code in Document)
<<sessioninfo, echo=TRUE, cache=FALSE, include=TRUE, results='asis'>>=
   print(xtable(head(trn[,c(1:4,ncol(trn))])),table.placement='H')
@

\textbf{Coupon 1, 2, and 3}
Each coupon has its own set of descriptors attached to it. For instance, coupon $i$ has 
\verb!couponIDi! (an ID), 
\verb!pricei! (the "current" price of the product to which coupon $i$ pertains),
\verb!basePricei! (the "original" price of the product to which coupon $i$ pertains),
\verb!rewardi! (the "score value" for the value-added of the product for the retailer)
\verb!premiumProducti! (indicates if the product is premium),
\verb!brandi! (the brand of the product),
\verb!productGroupi! (the "product line" of the product),
and
\verb!categoryIDsi! (identifies the categories of the first coupon product).
Finally, there is also \verb!couponiUsed!.
%-- sessioninfo: R code (Code in Document)

Coupon 1:
<<coupon1info, echo=TRUE, cache=FALSE, include=TRUE, results='asis'>>=
   print(xtable(head(trn[,which(grepl('1',names(trn)))[1:5]])),table.placement='H')
   print(xtable(head(trn[,which(grepl('1',names(trn)))[6:7]])),table.placement='H')
   print(xtable(head(trn[,which(grepl('1',names(trn)))[8:9]])),table.placement='H')
@

Coupon 2:
<<coupon2info, echo=TRUE, cache=FALSE, include=TRUE, results='asis'>>=
   print(xtable(head(trn[,which(grepl('2',names(trn)))[1:5]])),table.placement='H')
   print(xtable(head(trn[,which(grepl('2',names(trn)))[6:7]])),table.placement='H')
   print(xtable(head(trn[,which(grepl('2',names(trn)))[8:9]])),table.placement='H')
@

Coupon 3:
<<coupon3info, echo=TRUE, cache=FALSE, include=TRUE, results='asis'>>=
   print(xtable(head(trn[,which(grepl('3',names(trn)))[1:5]])),table.placement='H')
   print(xtable(head(trn[,which(grepl('3',names(trn)))[6:7]])),table.placement='H')
   print(xtable(head(trn[,which(grepl('3',names(trn)))[8:9]])),table.placement='H')
@


\section{Exploring the Data}
\subsection{Session information}
 
There are two time variables which could be better formatted using \verb!lubridate!.
Additionally, it allows us to extract the time, date, and the day of the week separately.
I add an indicator for weekend instead of weekday and Friday/Saturday vs the rest of the week.
I wrote this function so that it could be done quickly for both variables in the training
and in the test set:
%-- manageTime: R code (Code in Document)
<<manageTime, echo=TRUE, cache=FALSE, include = TRUE>>=
   TimeFeatures = function(dsn,varn){
      #don't overwrite you data
      stopifnot(!(paste0(varn,'DoW') %in% names(dsn)))
      
      #store time variables in this set
      dsn.time = dsn[,c('orderID',varn)]

      # add information about order dates
      dsn.time[,varn] = ymd_hms(dsn.time[,varn],tz='CET')

      #split the date-time variable into date and time
      timedate = ldply(strsplit(dsn[,varn]," "))

      #get time of day, date, and day of week alone
      dsn.time$Date = ymd(timedate[,1])
      dsn.time$Time = hms(timedate[,2])

      #get the day of the week
      dsn.time$DoW = wday(dsn.time[,varn],label=TRUE,abbr=FALSE)

      #weekend or preweekend indicators
      dsn.time$Weekend = factor(1*(dsn.time$DoW %in% c("Saturday", "Sunday")))
      dsn.time$FriSat = factor(1*(dsn.time$DoW %in% c("Friday","Saturday")))

      #merge with original data set
      names(dsn.time)[-c(1:2)] = paste0(varn,names(dsn.time)[-c(1:2)])

      dsn = merge(dsn.time, dsn[,names(dsn) != varn], by="orderID")
      return(dsn)
   }

   #Whatever you do to the training set
   trn = TimeFeatures(trn,"orderTime")
   trn = TimeFeatures(trn,"couponsReceived")

   #try if you can to do the same to the test set
   tst = TimeFeatures(tst,"orderTime")
   tst = TimeFeatures(tst,"couponsReceived")
@

Now that we have created the time variable as a backbone, 
we can make some interesting plots:
%-- R figure (code in document - set include=FALSE to remove)
\Sexpr{fig.cap = "As time passes, new orders are processed.  Notice that the number of new orders is generally smooth, indicating that customers are buying items consistently."}
Also notice that orders are numbered as they made.
<<fig.width=10, fig.height=5, fig.cap=fig.cap, echo=TRUE>>=
   qplot(orderTime,orderID,data=trn)
@
We can verify that orders are numbered in increasing order through time:
%-- R code (Code in Document)
<<echo=TRUE, cache=FALSE, include = TRUE>>=
   sum(sapply(1:nrow(trn), function(i) sum(trn$orderTime[i] < trn$orderTime & trn$orderID[i] > trn$orderID)))
@

This creates a bit of a puzzle in our next plot:
\Sexpr{fig.cap = "Orders alway follow receiving of coupons, but the odd shapes indicate that there is structure to the data beyond the fact that shoppers get coupons before purchasing any products."}
<<fig.width=10, fig.height=5, fig.cap=fig.cap, echo=TRUE>>=
   qplot(couponsReceived,orderTime,data=trn)
@

It seems that customers can not use coupons indefinetly. 
In fact, the difference between two points never exceeds  one week.
%-- nnss: R code (Code in Document)
<<nnss, echo=TRUE, cache=FALSE, include = TRUE>>=
   #longest time to act on coupon
   max(difftime(trn$orderTime,trn$couponsReceived,units='days'))

   #shortest time to act on coupon
   min(difftime(trn$orderTime,trn$couponsReceived,units='secs'))
@
The earliest a fastest a customer acts on a coupon is 6 seconds!
Lets consider the possibility that customers are receiving coupons in gigantic batches.
Then it makes sense that the coupons will have one-week limits, and then a new batch of coupons are sent out.
For example, if we take the first time and add 7 days, any customer receiving coupons has only until
the 7th day after any customer in that batch receives a coupon to place an order.

We can use this idea to demarcate time into batches. 
This function assumes 
\begin{itemize}
   \item Coupons are sent in batches
\item Coupons are sent at the same time
\item A person has 7 days after the coupons are sent to use them, regardless of when the coupon is "received"
\end{itemize}

In addition to batchID, we can add the "pseudo-expiration" date of the coupon and "date sent" variables to our data:
%-- batches: R code (Code in Document) 
<<batches, echo=TRUE, cache=FALSE, include = TRUE>>=
   GetBatchInfo = function(initial_batch.ymd_hms, nbatch=10, weeks2expire = 1, train=trn, test=tst){
      # start sending coupons: initial_batch.ymd_hms = "2015-01-06 1:00:00"
      #                        initial_batch.ymd_hms = "2015-01-03 1:00:00"
      # How many batches are there?  nbatch = 10
      # how long are coupons valid?  weeks2expire = 1
      # what is the training set?  train = trn
      # what is the test set?  test = tst

      require(lubridate)
      stopifnot(is.POSIXct(ymd_hms(initial_batch.ymd_hms)) & is.POSIXt(ymd_hms(initial_batch.ymd_hms)))

      # expiration date one week after coupons are sent
      couponLengthValid= weeks(weeks2expire)

      # batches go out when the last batch expires
      weeksbtwnbatches = weeks2expire

      #coupons start on 
      batch.start = ymd_hms(initial_batch.ymd_hms,tz ='CET')

      # make data frame
      couponBatches = data.frame(
         'sendDate' = batch.start + (0:(nbatch-1))*couponLengthValid,
         'expireDate' = batch.start + 1:nbatch*couponLengthValid,
         'batch' = factor(1:nbatch))

      #create time interval
      couponBatches$validInterval = with(couponBatches,interval(sendDate, expireDate))

      #give the training set batchID
      train$batchID = 0 
      train$couponsExpire = batch.start + years(1)
      train$couponsSent = batch.start
      for(i in 1:nbatch){
         orderinbatch= train$orderTime %within% couponBatches$validInterval[i] & train$couponsReceived %within% couponBatches$validInterval[i]
         couponinbatch= train$couponsReceived %within% couponBatches$validInterval[i]
         if(sum(orderinbatch) > 0) train$batchID[orderinbatch] = couponBatches$batch[i]
         if(sum(couponinbatch) > 0){
            train$couponsSent[couponinbatch] = couponBatches$couponsSent[i]
            train$couponsExpire[couponinbatch] = couponBatches$couponsExpire[i]
         }
      }
      train$batchID = as.factor(train$batchID)
      train$dataset = "train"

      test$batchID = 0 
      test$couponsExpire = batch.start + years(1)
      test$couponsSent = batch.start
      for(i in 1:nbatch){
         orderinbatch= test$orderTime %within% couponBatches$validInterval[i] & test$couponsReceived %within% couponBatches$validInterval[i]
         couponinbatch= test$couponsReceived %within% couponBatches$validInterval[i]
         if(sum(orderinbatch) > 0) test$batchID[orderinbatch] = couponBatches$batch[i]
         if(sum(couponinbatch) > 0){
            test$couponsSent[couponinbatch] = couponBatches$couponsSent[i]
            test$couponsExpire[couponinbatch] = couponBatches$couponsExpire[i]
         }
      }
      test$batchID = as.factor(test$batchID)
      test$dataset = "test"

      #create the plots
      batch.invalid = data.frame('batch.violation' = c(train$batchID == 0, test$batchID == 0))

      #plots help us make sure that the batches make sense
      p1 = ggplot() + geom_point(data=cbind(rbind(train,test),batch.invalid),aes(x=couponsReceived,y=orderTime,shape=dataset,size=batch.violation))

      p2 = ggplot() +geom_rect(data=couponBatches, aes(xmin=sendDate, xmax=sendDate+weeks(1), ymin=sendDate, ymax=expireDate, fill = batch),alpha=I(.4)) + geom_point(data=cbind(rbind(train,test),batch.invalid),aes(x=couponsReceived,y=orderTime,shape=dataset),size=I(.9)) 

      p3 = ggplot() + geom_point(data=cbind(rbind(train,test),batch.invalid),aes(x=couponsReceived,y=orderTime,color=batchID),size=I(.9))

      train = train[,-which(names(train) == "dataset")]
      test = test[,-which(names(test) == "dataset")]

      results = list('train' = train, 'test' = test, 'plots' = list(p1,p2,p3))

      return(results)
   }
@

If we start putting the batches together using Tuesday January 1st 2015 at 9:00 am we get some ugly results:
%-- assign_batch: R code (Code in Document)
<<assign_batch, echo=TRUE, cache=FALSE, include = TRUE>>=
   #this batch leads to bad results
   batchres = GetBatchInfo("2015-01-06 00:00:00")
@
%$
Customers are using coupons much more than a week after they were sent out if 
the first batch was sent at 9:00 am: we have orders where the customer is receiving the coupon
in one batch, but using them in a different batch (batch violations):
%-- batchplots2: R code (Code in Document)
%\Sexpr{fig.cap = paste('Plotting the observations as coupon batch submissions. This assumes batches are exist and are sent at',first.day[1])}
<<batchplots, fig.width=9, fig.height=5, out.width='.8\\maxwidth', fig.cap=fig.cap, echo=TRUE>>=
   batchres$plots[[1]]
   batchres$plots[[2]]
   batchres$plots[[3]]
@
we may be able to find gaps on the Tuesdays that help us figure out when the coupons are 
and we can plot these as well:
%-- gapsTuesday: R code (Code in Document)
<<gapsTuesday, echo=TRUE, cache=FALSE, include = TRUE>>=
   #combine the results
   d = rbind(trn,tst)

   #the only issue is if they get coupons at the very last moment and then order something
   #this means they order coupons on a Tuesday and get coupons on a Tuesday
   #batch.timing = d[which(d$orderTimeDoW == "Tuesday" & d$couponsReceivedDoW %in% c("Monday","Tuesday")),]
   min(d$couponsReceivedDate)
   wday(min(d$couponsReceivedDate),label=TRUE)

   #start all the weeks between on Sunday
   start.weeks = ymd_hms("2015-01-04 00:00:00",tz = "CET")
   d$StartOfWeek = start.weeks
   for(i in 1:12){
      chng = d$couponsReceived > start.weeks + weeks(i)
      if(sum(chng) > 0){
         d$StartOfWeek[which(chng)] = start.weeks + weeks(i)
      }
   }
      
   #lets look for gaps
   b.m = melt(d,c("orderID","couponsReceivedDate","StartOfWeek"),c("orderTime","couponsReceived"))
   b.m$value= as.numeric(difftime(b.m$value,b.m$StartOfWeek, units='days'))

   DeliveryDates = data.frame(daystr = rep(0:floor(max(b.m$value))),
                              dayend = rep(1:ceiling(max(b.m$value))),
                              lowery = start.weeks,
                              uppery = start.weeks + 12*weeks(1),
                              dow = wday(start.weeks + days(1)*(0:floor(max(b.m$value))),label=TRUE,abbr=FALSE))

   ggplot() +geom_rect(data=DeliveryDates, aes(xmin=daystr, xmax=dayend, ymin=lowery, ymax=uppery, fill = dow),alpha=I(.4)) +geom_line(data=b.m,aes(x=value,y=couponsReceivedDate,group=orderID))
@
So using Tuesdays at midnight to demarcate batches seems like a safe solution.
We can save the \verb!order -> batch! assgnments as:
<<assign_batch2, echo=TRUE, cache=FALSE, include = TRUE>>=
   #this batch leads to bad results
   batchres = GetBatchInfo("2015-01-06 00:00:00")

   batchres$plots[[1]]
   batchres$plots[[2]]
   batchres$plots[[3]]

   write.csv(batchres$train[,c("orderID","batchID","couponsSent","couponsExpire")],file='./written_data/trainingset.batchID.csv',row.names=FALSE,quote=FALSE,na="")
   write.csv(batchres$test[,c("orderID","batchID","couponsSent","couponsExpire")],file='./written_data/testingset.batchID.csv',row.names=FALSE,quote=FALSE,na="")

